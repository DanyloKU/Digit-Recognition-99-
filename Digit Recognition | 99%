{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#Importing libraries \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,classification_report\nimport os","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-29T07:30:28.577622Z","iopub.execute_input":"2024-07-29T07:30:28.578000Z","iopub.status.idle":"2024-07-29T07:30:28.585097Z","shell.execute_reply.started":"2024-07-29T07:30:28.577971Z","shell.execute_reply":"2024-07-29T07:30:28.584164Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Loading the data\ntest = pd.read_csv('/kaggle/input/digit-recognizer/test.csv')\ntrain_d = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-29T07:30:28.586754Z","iopub.execute_input":"2024-07-29T07:30:28.587034Z","iopub.status.idle":"2024-07-29T07:30:32.632874Z","shell.execute_reply.started":"2024-07-29T07:30:28.587011Z","shell.execute_reply":"2024-07-29T07:30:32.631873Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def image_sample(l_data, index):\n    data = l_data.drop('label', axis = 1)\n    image = data.iloc[index].to_numpy()\n    image = image.reshape((28,28))\n    plt.figure(figsize=(3,3))\n    plt.imshow(image,cmap='gray')\n    plt.title(l_data.iloc[index, 0])\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-29T07:30:32.634217Z","iopub.execute_input":"2024-07-29T07:30:32.634665Z","iopub.status.idle":"2024-07-29T07:30:32.641369Z","shell.execute_reply.started":"2024-07-29T07:30:32.634627Z","shell.execute_reply":"2024-07-29T07:30:32.640483Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for i in range(10):    \n    image_sample(train_d,i)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T07:30:32.642808Z","iopub.execute_input":"2024-07-29T07:30:32.643149Z","iopub.status.idle":"2024-07-29T07:30:35.564533Z","shell.execute_reply.started":"2024-07-29T07:30:32.643118Z","shell.execute_reply":"2024-07-29T07:30:35.563595Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Image normalization\ny_train = train_d['label']\nx_train = train_d.drop('label', axis = 1).values / 255.0\ntest = test.values / 255.0\n\nnp.shape(test)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T07:30:35.566962Z","iopub.execute_input":"2024-07-29T07:30:35.567258Z","iopub.status.idle":"2024-07-29T07:30:35.833417Z","shell.execute_reply.started":"2024-07-29T07:30:35.567233Z","shell.execute_reply":"2024-07-29T07:30:35.832482Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train test split\nX_train, X_test, Y_train, Y_test = train_test_split(x_train, y_train, test_size = 0.2, random_state = 42)\n\nX_train = X_train.reshape(-1, 28, 28)\nX_test = X_test.reshape(-1, 28, 28)\ntest = test.reshape(-1, 28, 28)\nnp.shape(test)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T07:30:35.834747Z","iopub.execute_input":"2024-07-29T07:30:35.835351Z","iopub.status.idle":"2024-07-29T07:30:36.216197Z","shell.execute_reply.started":"2024-07-29T07:30:35.835323Z","shell.execute_reply":"2024-07-29T07:30:36.215321Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#This function will exponentially slow down the learning rating after\n#10 epochs to prevent overfitting in the latter stages\n\ncheduler(epoch, lr):\n    if epoch < 10:\n        return lr\n    else:\n        return lr * np.exp(-0.1)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T09:18:47.945467Z","iopub.execute_input":"2024-07-29T09:18:47.946378Z","iopub.status.idle":"2024-07-29T09:18:47.976276Z","shell.execute_reply.started":"2024-07-29T09:18:47.946346Z","shell.execute_reply":"2024-07-29T09:18:47.975032Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;36m  Cell \u001b[0;32mIn[1], line 5\u001b[0;36m\u001b[0m\n\u001b[0;31m    cheduler(epoch, lr):\u001b[0m\n\u001b[0m                       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"],"ename":"SyntaxError","evalue":"invalid syntax (3695343928.py, line 5)","output_type":"error"}]},{"cell_type":"code","source":"# Building a model \nmodel = Sequential()\nmodel = tf.keras.Sequential()\n# Input layer\nmodel.add(tf.keras.Input(shape=(28, 28, 1)))\n\nmodel.add(layers.Conv2D(filters = 16,\n                kernel_size = (5, 5),\n                activation = \"relu\"))\nmodel.add(layers.Dropout(rate=0.2))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(filters = 32,\n                kernel_size = (2, 2),\n                activation = \"relu\"))\nmodel.add(layers.Conv2D(filters = 32,\n                kernel_size = (2, 2),\n                activation = \"relu\"))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(128, activation = 'relu'))\n#Output layer\nmodel.add(layers.Dense(10, activation = \"softmax\"))","metadata":{"execution":{"iopub.status.busy":"2024-07-29T07:30:36.224125Z","iopub.execute_input":"2024-07-29T07:30:36.224408Z","iopub.status.idle":"2024-07-29T07:30:36.324837Z","shell.execute_reply.started":"2024-07-29T07:30:36.224359Z","shell.execute_reply":"2024-07-29T07:30:36.323961Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"callback = keras.callbacks.LearningRateScheduler(scheduler)\nmodel.summary()\nmodel.compile(optimizer = \"Adam\",\n             loss = \"sparse_categorical_crossentropy\",\n             metrics = [\"accuracy\"])","metadata":{"execution":{"iopub.status.busy":"2024-07-29T07:30:36.326204Z","iopub.execute_input":"2024-07-29T07:30:36.326823Z","iopub.status.idle":"2024-07-29T07:30:36.359909Z","shell.execute_reply.started":"2024-07-29T07:30:36.326788Z","shell.execute_reply":"2024-07-29T07:30:36.359180Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history = model.fit(X_train, Y_train, epochs = 20, verbose = 1, validation_data = (X_test, Y_test), validation_split=0.1, callbacks=[callback])","metadata":{"execution":{"iopub.status.busy":"2024-07-29T07:30:36.360857Z","iopub.execute_input":"2024-07-29T07:30:36.361108Z","iopub.status.idle":"2024-07-29T07:31:41.152332Z","shell.execute_reply.started":"2024-07-29T07:30:36.361086Z","shell.execute_reply":"2024-07-29T07:31:41.151278Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig = plt.figure()\nplt1 = fig.add_subplot(2, 1, 1)\nplt1.plot(history.history['accuracy'])\nplt1.plot(history.history['val_accuracy'])\nplt1.set_title('model accuracy')\nplt1.set_ylabel('accuracy')\nplt1.set_xlabel('epoch')\nplt1.legend(['train', 'validation'], loc='upper left')\nplt.subplots_adjust(hspace=0.5)\n\nplt2 = fig.add_subplot(2, 1, 2)\nplt2.plot(history.history['loss'])\nplt2.plot(history.history['val_loss'])\nplt2.set_title('model loss')\nplt2.set_ylabel('loss')\nplt2.set_xlabel('epoch')\nplt2.legend(['train', 'validation'], loc='upper left')","metadata":{"execution":{"iopub.status.busy":"2024-07-29T07:31:41.154001Z","iopub.execute_input":"2024-07-29T07:31:41.154702Z","iopub.status.idle":"2024-07-29T07:31:41.678107Z","shell.execute_reply.started":"2024-07-29T07:31:41.154665Z","shell.execute_reply":"2024-07-29T07:31:41.677180Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prediction = model.predict(test)\nprediction = np.argmax(prediction, axis = 1)\nprint(prediction)","metadata":{"execution":{"iopub.status.busy":"2024-07-29T07:31:41.679501Z","iopub.execute_input":"2024-07-29T07:31:41.680133Z","iopub.status.idle":"2024-07-29T07:31:43.903471Z","shell.execute_reply.started":"2024-07-29T07:31:41.680098Z","shell.execute_reply":"2024-07-29T07:31:43.902512Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'ImageId': range(1, len(prediction) + 1),\n    'Label': prediction\n})\n\nsubmission.to_csv('submission.csv', index=False)\nprint(f\"File saved as: {os.path.abspath('submission.csv')}\")\nprint(submission.head())","metadata":{"execution":{"iopub.status.busy":"2024-07-29T07:31:43.904941Z","iopub.execute_input":"2024-07-29T07:31:43.905334Z","iopub.status.idle":"2024-07-29T07:31:43.949330Z","shell.execute_reply.started":"2024-07-29T07:31:43.905300Z","shell.execute_reply":"2024-07-29T07:31:43.948453Z"},"trusted":true},"execution_count":null,"outputs":[]}]}